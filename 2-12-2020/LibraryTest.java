/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DataCollection;

import java.io.File;  
import java.io.FileInputStream;  
import java.io.IOException;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Locale;
import java.lang.NumberFormatException;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.hssf.usermodel.HSSFSheet;  
import org.apache.poi.hssf.usermodel.HSSFWorkbook;  
import org.apache.poi.ss.usermodel.Cell;  
import org.apache.poi.ss.usermodel.FormulaEvaluator;  
import org.apache.poi.ss.usermodel.Row; 
import java.lang.NumberFormatException;
public class LibraryTest {
   public static void main(String[] args) throws EncryptedDocumentException, IOException, ClassNotFoundException, SQLException, ParseException, NumberFormatException
   {
	   SQLAccess data = new SQLAccess();
	 FileInputStream fis=new FileInputStream(new File("C:/Users/chinna/Desktop/wed/file_example_XLS_10.xls"));  
	 HSSFWorkbook wb=new HSSFWorkbook(fis);   
	 HSSFSheet sheet=wb.getSheetAt(0);  
	 FormulaEvaluator formulaEvaluator=wb.getCreationHelper().createFormulaEvaluator();  
	 int loop=1;
	 String decision="o";
	 for(Row row: sheet)
	 { 
		 if(loop==3)
		 {
			 for(Cell cell: row)  
			 {  
				 if(cell==null|| cell.getCellType()== CellType.BLANK) {}
				 else 
				 {
					 int work_from_home=0;
					 switch(formulaEvaluator.evaluateInCell(cell).getCellType())  
					 {  			 		
						 case NUMERIC:	break;
						 case STRING:
							 String temp1=cell.getStringCellValue().toLowerCase();
							 String spliting[]= temp1.split(" ");
								for(String temp2:spliting)
								{
									if(temp2.compareTo("earned")==0)
									{
										decision=temp2;
										break;
									}
									else if(temp2.compareTo("contingency")==0)
									{
										decision=temp2;
										break;
									}
									else if(temp2.compareTo("work")==0)
									{
										work_from_home++;
									}
									else if(temp2.compareTo("home")==0)
									{
										work_from_home++;
									}
								}
								break;  
				     } 
					 if(work_from_home==2)
					 {
						 decision="Work From Home";
						 break;
					 }
				 }
			 }
		 }
		 
		 else if(loop>3)
		 {
			 ArrayList<String> arrlist = new ArrayList<String>();
			 LocalDate[] dates = new LocalDate[3];
			 int i=0;
			 for(Cell cell: row)  
			 {  
				 if(cell==null|| cell.getCellType()== CellType.BLANK)
				 {
					 arrlist.add("No Data");
				 }
				 else {
				 switch(formulaEvaluator.evaluateInCell(cell).getCellType())  
				 {  			 		
					 case NUMERIC:  
						 if(DateUtil.isCellDateFormatted(cell))
						 {	
							 SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
							String temp = dateFormat.format(cell.getDateCellValue());
							DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy", Locale.ENGLISH);
							LocalDate date = LocalDate.parse(temp, formatter);
							dates[i]=date;
							i++;
						 }
						 else {  
							 int n=(int) cell.getNumericCellValue();
							 arrlist.add(String.valueOf(n));
						 }				
					 break;  
					 case STRING:   
						 arrlist.add(cell.getStringCellValue());
				 break;  
				 }  
			 }  
			 }
		  String str=arrlist.toString().replace("[","").replace("]","");
		  if(decision.compareTo("earned")==0)
			  data.data_send_Database(str,dates);
		  else if(decision.compareTo("contingency")==0)
			  System.out.println("It will go to contingency data base");
		  else if(decision.compareTo("Work From Home")==0)
			  System.out.println("It will go to Work form home data base");
		 }
		 loop++;
	 }  
	
   }	
}